# general settings
name: train_MYIR_scratch
model_type: MYModel
scale: 1
num_gpu: 1
manual_seed: 100
is_train: True
dist: False
# dataset and data loader settings
datasets:
  train:
    name: TrainSet
    type: Dataset_DefocusDeblur_DualPixel_16bit
#    dataroot_gt: D:\code\BasicSR\datasets\DPDD\val
#    dataroot_lqL: D:\code\BasicSR\datasets\DPDD\train\L
#    dataroot_lqR: D:\code\BasicSR\datasets\DPDD\train\R
#    dataroot_gt: /home/lab/code1/MYIR/datasets/DPDD1/val
#    dataroot_lqL: /home/lab/code1/MYIR/datasets/DPDD1/train/L
#    dataroot_lqR: /home/lab/code1/MYIR/datasets/DPDD1/train/R
    dataroot_gt: /root/autodl-tmp/train/DPDD/target_crops
    dataroot_lqL: /root/autodl-tmp/train/DPDD/inputL_crops
    dataroot_lqR: /root/autodl-tmp/train/DPDD/inputR_crops
    filename_tmpl: '{}'
    io_backend:
      type: disk
    geometric_augs: true


    # data loader
    use_shuffle: true
    num_worker_per_gpu: 1
    batch_size_per_gpu: 8
    dataset_enlarge_ratio: 8
    prefetch_mode: ~
    ### -------------Progressive training--------------------------
    mini_batch_sizes: [ 8,5,4,2,1,1 ]             # Batch size per gpu
    iters: [ 92000,64000,48000,36000,36000,24000 ]
    gt_size: 384   # Max patch size for progressive training
    gt_sizes: [128,160,192,256,320,384]  # Patch sizes for progressive training.
#    gt_sizes: [160,384,384,384,384,384]  # Patch sizes for progressive training.
    ### ------------------------------------------------------------

  val:
    name: ValSet
    type: Dataset_DefocusDeblur_DualPixel_16bit
#    dataroot_gt: /home/lab/code1/MYIR/datasets/DPDD1/val
#    dataroot_lqL: /home/lab/code1/MYIR/datasets/DPDD1/train/L
#    dataroot_lqR: /home/lab/code1/MYIR/datasets/DPDD1/train/R
    dataroot_gt: /root/autodl-tmp/pycharm_project_983/datasets/val/DPDD/target_crops
    dataroot_lqL: /root/autodl-tmp/pycharm_project_983/datasets/val/DPDD/inputL_crops
    dataroot_lqR: /root/autodl-tmp/pycharm_project_983/datasets/val/DPDD/inputR_crops
    io_backend:
      type: disk

# network structures
network_g:
  type: MYIR
#  upscale: 1
  in_chans: 6
  embed_dim: 96
#  num_heads: [0, 0, 0, 0, 3, 6, 12, 24]
  num_heads: [3, 6, 12, 24 ]
#  num_heads: [0, 0,  12, 24 ]
#  num_heads: [3, 6, 12, 24 ]
#  depths: [3, 3, 9, 3, 2, 2, 6, 2]
  depths: [2, 2, 6, 2 ]
#  depths: [3, 3, 6, 2,  ]
#  depths: [2, 2, 6, 2 ]
#  is_conv_list: [false,false,false,false]
  is_conv_list: [false,false,false,false]
  dilations: [
#  [],
#  [],
#  [],
#  [],
  [1, 8],
  [1, 4],
  [1, 2, 1, 2, 1, 2],
  [1, 1],

  ]
  mlp_ratio: 2

# path
path:
  pretrain_network_g: ~
  strict_load_g: true
  resume_state: /root/autodl-tmp/pycharm_project_983/experiments/train_MYIR_scratch/training_states/138000.state
#  resume_state: ~

# training settings
train:
  total_iter: 500000
  warmup_iter: -1  # no warm up
  use_grad_clip: true
  ema_decay: 0.999
  optim_g:
    type: AdamW
    lr: !!float 3e-4
    weight_decay: !!float 1e-4
    betas: [ 0.9, 0.99 ]

  scheduler:
    type: CosineAnnealingRestartCyclicLR
    periods: [ 92000, 408000 ]
    restart_weights: [ 1,1 ]
    eta_mins: [ 0.0003,0.000001 ]

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean
#  perceptual_opt:
#    type: PerceptualLoss
#    layer_weights:  {'relu2_2': 1.,
#                     'relu1_2': 1.,
#                     'relu3_3': 1.,
#                     'relu4_3': 1.,
#                     'relu5_4': 1.,
#                                  }
#    style_weight: 0.2
#    perceptual_weight: 0.2


# validation settings
val:
  val_freq: !!float 2e2
  save_img: false

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 200
  save_checkpoint_freq: !!float 2e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
